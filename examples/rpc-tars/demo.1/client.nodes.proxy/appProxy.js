// **********************************************************************
// Parsed By TarsParser(1.1.0), Generated By tars2node(20190529)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "app.tars" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TarsError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var PkgBizCard = PkgBizCard || {};
module.exports.PkgBizCard = PkgBizCard;

PkgBizCard.BizCardProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

PkgBizCard.BizCardProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

PkgBizCard.BizCardProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

PkgBizCard.BizCardProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

PkgBizCard.BizCardProxy.prototype.getVersion = function () {
    return this._worker.version;
};

var __PkgBizCard_BizCard$Get$IF = {
    "name" : "Get",
    "return" : "int32",
    "arguments" : [{
        "name" : "method",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "params",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "resp",
        "class" : "string",
        "direction" : "out"
    }]
};

var __PkgBizCard_BizCard$Get$IE = function (method, params) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, method);
    os.writeString(2, params);
    return os.getBinBuffer();
};

var __PkgBizCard_BizCard$Get$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "resp" : is.readString(3, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __PkgBizCard_BizCard$Get$PE = function (method, params, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("method", method);
    tup.writeString("params", params);
    return tup;
};

var __PkgBizCard_BizCard$Get$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "resp" : tup.readString("resp")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __PkgBizCard_BizCard$Get$ER = function (data) {
    throw _makeError(data, "Call BizCard::Get failed");
};

PkgBizCard.BizCardProxy.prototype.Get = function (method, params) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("Get", __PkgBizCard_BizCard$Get$PE(method, params, version), arguments[arguments.length - 1], __PkgBizCard_BizCard$Get$IF).then(__PkgBizCard_BizCard$Get$PD, __PkgBizCard_BizCard$Get$ER);
    } else {
        return this._worker.tars_invoke("Get", __PkgBizCard_BizCard$Get$IE(method, params), arguments[arguments.length - 1], __PkgBizCard_BizCard$Get$IF).then(__PkgBizCard_BizCard$Get$ID, __PkgBizCard_BizCard$Get$ER);
    }
};
PkgBizCard.BizCardProxy.Get = __PkgBizCard_BizCard$Get$IF;

var __PkgBizCard_BizCard$Put$IF = {
    "name" : "Put",
    "return" : "int32",
    "arguments" : [{
        "name" : "method",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "params",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "resp",
        "class" : "string",
        "direction" : "out"
    }]
};

var __PkgBizCard_BizCard$Put$IE = function (method, params) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, method);
    os.writeString(2, params);
    return os.getBinBuffer();
};

var __PkgBizCard_BizCard$Put$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "resp" : is.readString(3, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __PkgBizCard_BizCard$Put$PE = function (method, params, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("method", method);
    tup.writeString("params", params);
    return tup;
};

var __PkgBizCard_BizCard$Put$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "resp" : tup.readString("resp")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __PkgBizCard_BizCard$Put$ER = function (data) {
    throw _makeError(data, "Call BizCard::Put failed");
};

PkgBizCard.BizCardProxy.prototype.Put = function (method, params) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("Put", __PkgBizCard_BizCard$Put$PE(method, params, version), arguments[arguments.length - 1], __PkgBizCard_BizCard$Put$IF).then(__PkgBizCard_BizCard$Put$PD, __PkgBizCard_BizCard$Put$ER);
    } else {
        return this._worker.tars_invoke("Put", __PkgBizCard_BizCard$Put$IE(method, params), arguments[arguments.length - 1], __PkgBizCard_BizCard$Put$IF).then(__PkgBizCard_BizCard$Put$ID, __PkgBizCard_BizCard$Put$ER);
    }
};
PkgBizCard.BizCardProxy.Put = __PkgBizCard_BizCard$Put$IF;



